/**
 * This class has been generated by Fast Code Eclipse Plugin 
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : karan
 * Created : 11/19/2020 01:35:37
 */

package com.cg.capbrading.repository;

import org.junit.*;
import org.junit.contrib.java.lang.system.SystemOutRule;

import static org.junit.Assert.*;
import com.cg.capbrading.repository.ProductDAOImpl;
import com.cg.capbrading.entity.Product;

import java.util.ArrayList;
import java.util.List;
import java.lang.String;
import com.cg.capbrading.entity.Vendor;


/**
 * ProductDAOImpl Implements ProductDAO
 * @author karan
 *
 */
public class ProductDAOImplTest {

	ProductDAOImpl productDAOImpl = new ProductDAOImpl();
	
	@Before
	public void init()
	{
		List<Product> products = new ArrayList<>();	
		Vendor vendor = new  Vendor(0, "name", "brand", products);
		VendorDAO vdo = new VendorDAOImpl();
		vdo.addVendor(vendor);
		
	}
	
	@Rule
	public final SystemOutRule systemOutRule = new SystemOutRule().enableLog();
	
	/**
	 * 
	 * 
	 * @see com.cg.capbrading.repository.ProductDAOImpl#addProduct(Product)
	 */
	@Test
	public void addProduct() {
		Product product = new Product("name", "brand", 10000, "category");
//		product.setVendorId(0);
		productDAOImpl.addProduct(product);
		
		String[] arr  = systemOutRule.getLogWithNormalizedLineSeparator().split("\n");
		String result = arr[arr.length-1];
		Assert.assertEquals("Data Added successfully", result);

	}

	/**
	 * 
	 * @see com.cg.capbrading.repository.ProductDAOImpl#deleteProduct(Product)
	 */
	@Test
	public void deleteProduct() {
		Product product = new Product("name", "brand", 10000, "category");
		productDAOImpl.deleteProduct(product);
		String[] arr  = systemOutRule.getLogWithNormalizedLineSeparator().split("\n");
		String result = arr[arr.length-1];
		Assert.assertEquals("Data Removed successfully", result);
	}

	/**
	 * 
	 * @see com.cg.capbrading.repository.ProductDAOImpl#updateProduct(Product)
	 */
	@Test
	public void updateProduct() {
		Product product = new Product("name", "brand", 20000, "category");
		productDAOImpl.updateProduct(product);
		String[] arr  = systemOutRule.getLogWithNormalizedLineSeparator().split("\n");
		String result = arr[arr.length-1];
		Assert.assertEquals("Data Updated successfully", result);
	}

	/**
	 *	
	 * @see com.cg.capbrading.repository.ProductDAOImpl#viewProductsByBrand(String)
	 */
	@Test
	public void viewProductsByBrand() {
		Product product = new Product("name", "brand", 10000, "category");
		productDAOImpl.addProduct(product);
		List<Product> result = productDAOImpl.viewProductsByBrand("brand");
		
						
							assertTrue("result should be not null and not empty", result != null && !result.isEmpty());
	}

	/**
	 *
	 * @see com.cg.capbrading.repository.ProductDAOImpl#viewProductsByCategory(String)
	 */
	@Test
	public void viewProductsByCategory() {
		Product product = new Product("name", "brand", 10000, "category");
		productDAOImpl.addProduct(product);
		List<Product> result = productDAOImpl.viewProductsByCategory("category");
		
						
							assertTrue("result should be not null and not empty", result != null && !result.isEmpty());
	}

	/**
	 *
	 * 
	 * @see com.cg.capbrading.repository.ProductDAOImpl#viewProductsByVendor(Vendor)
	 */
	@Test
	public void viewProductsByVendor() {
		List<Product> products = new ArrayList<>();
		Product product = new Product("name", "brand", 10000, "category");
		products.add(product);
		Vendor vendor = new  Vendor( 0, "name", "brand", products);
		//productDAOImpl.addProduct(product);
		VendorDAO vdo = new VendorDAOImpl();
		vdo.addVendor(vendor);
		List<Product> result = productDAOImpl.viewProductsByVendor(vendor);
		
						
							assertTrue("result should be not null and not empty", result != null && !result.isEmpty());
	}

	/**
	 *
	 * @see com.cg.capbrading.repository.ProductDAOImpl#viewAllProducts()
	 */
	@Test
	public void viewAllProducts() {
		Product product = new Product("name", "brand", 10000, "category");
		productDAOImpl.addProduct(product);
		List<Product> result = productDAOImpl.viewAllProducts();
		
						
							assertTrue("result should be not null and not empty", result != null && !result.isEmpty());
	}

	
}
