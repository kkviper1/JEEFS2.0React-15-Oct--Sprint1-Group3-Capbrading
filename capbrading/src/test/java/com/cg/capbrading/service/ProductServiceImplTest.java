/**
 * This class has been generated by Fast Code Eclipse Plugin 
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : karan
 * Created : 11/19/2020 08:41:50
 */

package com.cg.capbrading.service;

import org.junit.*;
import org.junit.contrib.java.lang.system.SystemOutRule;

import static org.junit.Assert.*;
import com.cg.capbrading.service.ProductServiceImpl;
import com.cg.capbrading.entity.Product;

import java.util.ArrayList;
import java.util.List;
import java.lang.String;
import com.cg.capbrading.entity.Vendor;
import com.cg.capbrading.repository.VendorDAO;
import com.cg.capbrading.repository.VendorDAOImpl;



public class ProductServiceImplTest {
	static ProductService productServiceImpl;
	
	@Rule
	public final SystemOutRule systemOutRule = new SystemOutRule().enableLog();

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		productServiceImpl = new ProductServiceImpl();
		Product product = new Product("name", "brand", 10000, "category");
		productServiceImpl.addProduct(product);
		
		
	
	}

	@Before
	public void setUp() throws Exception {
		
	}

	/**
	 *
	 * @see com.cg.capbrading.service.ProductServiceImpl#addProduct(Product)
	 */
	@Test
	public void addProduct() {
		Product product = new Product(null, null, 0, null);
		productServiceImpl.addProduct(product);
		String[] arr  = systemOutRule.getLogWithNormalizedLineSeparator().split("\n");
		String result = arr[arr.length-1];
		Assert.assertEquals("Data Added successfully", result);
	}

	/**
	 *
	 * @see com.cg.capbrading.service.ProductServiceImpl#deleteProduct(Product)
	 */
	@Test
	public void deleteProduct() {
		Product product = new Product(null, null, 0, null);
		productServiceImpl.deleteProduct(product);
		String[] arr  = systemOutRule.getLogWithNormalizedLineSeparator().split("\n");
		String result = arr[arr.length-1];
		Assert.assertEquals("Data Removed successfully", result);
	}

	/**
	 *
	 * @see com.cg.capbrading.service.ProductServiceImpl#updateProduct(Product)
	 */
	@Test
	public void updateProduct() {
		Product product = new Product(null, null, 0, null);
		productServiceImpl.updateProduct(product);
		String[] arr  = systemOutRule.getLogWithNormalizedLineSeparator().split("\n");
		String result = arr[arr.length-1];
		Assert.assertEquals("Data Updated successfully", result);
	}

	/**
	 *
	 * @see com.cg.capbrading.service.ProductServiceImpl#viewProductsByCategory(String)
	 */
	@Test
	public void viewProductsByCategory() {
		List<Product> result = productServiceImpl.viewProductsByCategory("category");
		
						
							assertTrue("result should be not null and not empty", result != null && !result.isEmpty());
	}

	/**
	 *
	 * @see com.cg.capbrading.service.ProductServiceImpl#viewProductsByBrand(String)
	 */
	@Test
	public void viewProductsByBrand() {
		List<Product> result = productServiceImpl.viewProductsByBrand("brand");
		
						
							assertTrue("result should be not null and not empty", result != null && !result.isEmpty());
	}

	/**
	 *
	 * @see com.cg.capbrading.service.ProductServiceImpl#viewProductsByVendor(Vendor)
	 */
	@Test
	public void viewProductsByVendor() {
		List<Product> products = new ArrayList<>();
		Product product = new Product("name", "brand", 10000, "category");
		products.add(product);
		Vendor vendor = new  Vendor( 0, "name", "brand", products);
		//productDAOImpl.addProduct(product);
		VendorDAO vdo = new VendorDAOImpl();
		vdo.addVendor(vendor);
		List<Product> result = productServiceImpl.viewProductsByVendor(vendor);
		
						
							assertTrue("result should be not null and not empty", result != null && !result.isEmpty());
	}

	/**
	 *
	 * @see com.cg.capbrading.service.ProductServiceImpl#viewAllProducts()
	 */
	@Test
	public void viewAllProducts() {
		List<Product> result = productServiceImpl.viewAllProducts();
		
						
							assertTrue("result should be not null and not empty", result != null && !result.isEmpty());
	}

	
}
